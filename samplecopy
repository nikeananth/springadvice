import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class AnimalApp {

    public static void main(String[] args) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // Example JSON array for multiple Tigers with "animalAge"
        String jsonArray = "[{ \"species\": \"Tiger\", \"sound\": \"Growl\", \"animalAge\": \"5\" }, " +
                           "{ \"species\": \"Tiger\", \"sound\": \"Roar\", \"age\": \"6\" }]";

        Animal[] animals = objectMapper.readValue(jsonArray, Animal[].class);

        for (Animal animal : animals) {
            System.out.println("Species: " + animal.getSpecies() + ", Sound: " + animal.getSound());
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "age")
    @JsonSubTypes({
            @JsonSubTypes.Type(value = Animal.Lion.class, name = "6"),
            @JsonSubTypes.Type(value = Animal.Tiger.class, name = "5")
    })
    @JsonDeserialize(using = Animal.AnimalArrayDeserializer.class)
    public static class Animal {
        private String species;
        private String sound;
        private String age;

        @Builder
        public Animal(String species, String sound, String age) {
            this.species = species;
            this.sound = sound;
            this.age = age;
        }

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        @Builder
        @JsonTypeName("6")
        public static class Lion extends Animal {
        }

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        @Builder
        @JsonTypeName("5")
        public static class Tiger extends Animal {
        }

        public static class AnimalArrayDeserializer extends JsonDeserializer<Animal[]> {

            @Override
            public Animal[] deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws IOException {
                ArrayNode root = ctxt.readTree(p);
                List<Animal> animals = new ArrayList<>();

                for (JsonNode node : root) {
                    ObjectNode objectNode = (ObjectNode) node;
                    JsonNode ageNode = objectNode.get("animalAge");
                    if (ageNode == null) {
                        ageNode = objectNode.get("age");
                    }

                    Animal animal = ctxt.readValue(objectNode.traverse(), Animal.class);
                    animals.add(animal);
                }

                return animals.toArray(new Animal[0]);
            }
        }
    }
}
