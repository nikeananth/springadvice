import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;

import java.util.Map;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.List;
import java.util.ArrayList;

public class ObjectCopyUtil {

    public static <T, U> U[] copyArray(T[] sourceArray, Class<U> targetClass, Map<String, String> fieldMappings) {
        U[] targetArray = (U[]) java.lang.reflect.Array.newInstance(targetClass, sourceArray.length);

        for (int i = 0; i < sourceArray.length; i++) {
            T source = sourceArray[i];
            U target = createInstance(targetClass);
            copyFields(source, target, fieldMappings);
            targetArray[i] = target;
        }

        return targetArray;
    }

    public static <T, U> void copyFields(T source, U target, Map<String, String> fieldMappings) {
        for (Map.Entry<String, String> entry : fieldMappings.entrySet()) {
            String sourceFieldName = entry.getKey();
            String targetFieldName = entry.getValue();

            try {
                Object sourceValue = PropertyUtils.getProperty(source, sourceFieldName);
                Object targetValue = PropertyUtils.getProperty(target, targetFieldName);

                if (sourceValue != null) {
                    if (isPrimitiveOrWrapper(sourceValue.getClass())) {
                        // Shallow copy primitive or wrapper
                        BeanUtils.copyProperty(target, targetFieldName, sourceValue);
                    } else {
                        // Deep copy non-primitive
                        BeanUtils.copyProperty(target, targetFieldName, deepCopyObject(sourceValue));
                    }
                } else {
                    // Handle null values
                    BeanUtils.copyProperty(target, targetFieldName, null);
                }
            } catch (ReflectiveOperationException e) {
                e.printStackTrace(); // Handle or log the exception as needed
            }
        }
    }

    private static <U> U createInstance(Class<U> targetClass) {
        try {
            return targetClass.getDeclaredConstructor().newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Failed to create an instance of " + targetClass, e);
        }
    }

    private static <T, U> U mapNestedObject(T source, Class<U> targetClass, Map<String, String> fieldMappings) {
        U target = createInstance(targetClass);
        copyFields(source, target, fieldMappings);
        return target;
    }

    private static <T> boolean isPrimitiveOrWrapper(Class<T> type) {
        return type.isPrimitive() || Number.class.isAssignableFrom(type)
                || Boolean.class.equals(type) || Character.class.equals(type)
                || CharSequence.class.isAssignableFrom(type);
    }

    public static void main(String[] args) {
        // Example usage with array of Employee and field name mappings
        Employee[] originalEmployees = {
                new Employee("John Doe", 101, 50000.0, createLinks(), new Address("123 Main St", "City", "12345")),
                new Employee("Jane Smith", 102, 60000.0, createLinks(), new Address("456 Oak St", "Town", "56789"))
        };

        // Field name mappings between Employee and EmployeeV2
        Map<String, String> fieldMappings = createFieldMappings();

        // Copy array of Employee to array of EmployeeV2
        EmployeeV2[] newEmployees = copyArray(originalEmployees, EmployeeV2.class, fieldMappings);

        // Print the result
        for (EmployeeV2 newEmployee : newEmployees) {
            System.out.println("New EmployeeV2: " + newEmployee);
        }
    }

    private static List<Map<String, Object>> createLinks() {
        // Create some example links
        List<Map<String, Object>> links = new ArrayList<>();
        links.add(Map.of("url", "https://example.com/link1", "description", "Link 1"));
        links.add(Map.of("url", "https://example.com/link2", "description", "Link 2"));
        return links;
    }

    private static Map<String, String> createFieldMappings() {
        // Define field name mappings between Employee and EmployeeV2
        Map<String, String> fieldMappings = Map.of(
                "name", "employeeName",
                "employeeId", "id",
                "salary", "annualSalary",
                "links", "contactLinks",
                "address", "employeeAddress",
                "dschema", "dschema"
        );
        return fieldMappings;
    }
}

class Employee {
    private String name;
    private int employeeId;
    private double salary;
    private ArrayList<Map<String, Object>> links;
    private Address address;
    private Object dschema;

    public Employee(String name, int employeeId, double salary, ArrayList<Map<String, Object>> links, Address address, Object dschema) {
        this.name = name;
        this.employeeId = employeeId;
        this.salary = salary;
        this.links = links;
        this.address = address;
        this.dschema = dschema;
    }

    // Getters and setters

    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", employeeId=" + employeeId +
                ", salary=" + salary +
                ", links=" + links +
               
